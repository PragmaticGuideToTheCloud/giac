baseDir: examples/geo-ruby-lakes-iac/
cfg:
  templatesDir: /Users/gajdaw/pgttc/giac/src/../templates/
  nunjucks:
    autoescape: false
    tags:
      variableStart: <<<
      variableEnd: '>>>'
      blockStart: <%
      blockEnd: '%>'
    dev: false
    throwOnUndefined: false
    trimBlocks: false
    lstripBlocks: false
  filenameConvertions:
    gitignore: .gitignore
    dockerignore: .dockerignore
    gitkeep: .gitkeep
iterations:
  - __VPC_NAME__: dev
    __ENV_NAME__: dev1
files:
  - src: files/auth/Makefile
    dest: auth/Makefile
  - src: files/helm/deploy.sh
    dest: helm/__VPC_NAME__/__ENV_NAME__/deploy.sh
  - src: files/helm/values.yaml
    dest: helm/__VPC_NAME__/__ENV_NAME__/values.yaml
  - src: files/README.md
    dest: README.md
  - src: files/giac-doc.md
    dest: giac-doc.md
  - src: terragrunt/terragrunt.hcl
    dest: terragrunt/terragrunt.hcl
  - src: files/gitignore
    dest: gitignore
  - src: files/docker/dockerfiles/ruby/rails-postgres.Dockerfile
    dest: docker/build/backend.Dockerfile
  - src: files/docker/dockerfiles/wait-for-it.sh
    dest: docker/build/wait-for-it.sh
  - src: files/docker/dockerfiles/node/node-frontend.Dockerfile
    dest: docker/build/frontend.Dockerfile
  - src: files/docker/dockerfiles/traefik/traefik.Dockerfile
    dest: docker/build/traefik.Dockerfile
  - src: files/docker/dockerfiles/traefik/traefik.toml
    dest: docker/build/traefik.toml
  - src: files/docker/test/docker-compose-traefik.yml
    dest: docker/test/docker-compose.yml
  - src: files/docker/build/gitignore
    dest: docker/build/gitignore
  - src: files/docker/build/dockerignore
    dest: docker/build/dockerignore
  - src: files/docker/test/env
    dest: docker/test/.env
  - src: files/docker/build/Makefile
    dest: docker/build/Makefile
dirs:
  - src: ansible
    dest: ansible
  - src: tests
    dest: tests
  - src: vpn
    dest: vpn
  - src: helm-charts/helm-chart-with-job
    dest: helm-chart
  - src: terragrunt/vpc
    dest: terragrunt/vpc
  - src: terragrunt/gke
    dest: terragrunt/gke
  - src: terragrunt/sql
    dest: terragrunt/sql
  - src: terragrunt/gsa
    dest: terragrunt/gsa
params:
  name: geo-ruby-lakes
  description: Geography / Ruby / Lakes
  app_repo: 'git@github.com:PragmaticGuideToTheCloud/geo-ruby-lakes.git'
  provider:
    gcp:
      project_id: gcp_project_id_12345
      envs:
        - dev/dev1
      vpc:
        boilerplate: >-
          git::ssh://git@github.com/PragmaticGuideToTheCloud/gcp-cloud-boilerplate.git//terraform/vpc
      gke:
        boilerplate: >-
          git::ssh://git@github.com/PragmaticGuideToTheCloud/gcp-cloud-boilerplate.git//terraform/gke-public-plane
      gsa:
        boilerplate: >-
          git::ssh://git@github.com/PragmaticGuideToTheCloud/gcp-cloud-boilerplate.git//terraform/gsa
      autoZone: false
  services:
    backend:
      url: /api/
      readinessEnabled: true
      readinessPath: /api/alive
      dockerComposeDependsOn:
        - database
      environment:
        DB_HOST: database
        DB_NAME: apidb
        DB_USER: apiuser
        DB_PASSWORD: SecretPassword123!
      srcCodePath: /backend
      command: >-
        ["/wait-for-it.sh", "database:5432", "--", "rails", "server", "-b",
        "0.0.0.0", "-p", "80"]
      withTraefik: true
    frontend:
      url: /
      srcCodePath: /frontend
      withTraefik: true
    database:
      image: 'postgres:13-alpine'
      environment:
        POSTGRES_DB: apidb
        POSTGRES_USER: apiuser
        POSTGRES_PASSWORD: SecretPassword123!
  terraform:
    - vpc
    - gke
    - sql
    - gsa
  db:
    database_host: database
    database_name: apidb
    database_user: apiuser
    database_password: SecretPassword123!
  helm:
    job:
      service: backend
      command: /bin/sh
      args:
        - '-c'
        - 'rails db:migrate'
  container_registry: eu.gcr.io
  ansibleBoilerplateUrl: 'git@github.com:PragmaticGuideToTheCloud/gcp-cloud-boilerplate.git'
  containers:
    - name: traefik
      srcCodePath: ''
    - name: backend
      srcCodePath: /backend
    - name: frontend
      srcCodePath: /frontend
  dockerServices:
    - name: traefik
      nodePort: 1
      url: ''
      type: NodePort
      excludeFromHelm: true
      dockerComposeServiceName: traefik
    - name: database
      image: 'postgres:13-alpine'
      url: ''
      excludeFromHelm: true
      type: NodePort
      environment:
        POSTGRES_DB: apidb
        POSTGRES_USER: apiuser
        POSTGRES_PASSWORD: SecretPassword123!
      dockerComposeServiceName: database
    - name: frontend
      nodePort: 32767
      url: /
      type: NodePort
      srcCodePath: /frontend
      withTraefik: true
      dockerComposeServiceName: frontend
    - name: backend
      nodePort: 32766
      url: /api/
      type: NodePort
      readinessEnabled: true
      readinessPath: /api/alive
      dockerComposeDependsOn:
        - database
      environment:
        DB_HOST: database
        DB_NAME: apidb
        DB_USER: apiuser
        DB_PASSWORD: SecretPassword123!
      srcCodePath: /backend
      command: >-
        ["/wait-for-it.sh", "database:5432", "--", "rails", "server", "-b",
        "0.0.0.0", "-p", "80"]
      withTraefik: true
      dockerComposeServiceName: backend
  helmServices:
    - name: frontend
      nodePort: 32767
      url: /
      type: NodePort
      srcCodePath: /frontend
      withTraefik: true
      dockerComposeServiceName: frontend
    - name: backend
      nodePort: 32766
      url: /api/
      type: NodePort
      readinessEnabled: true
      readinessPath: /api/alive
      dockerComposeDependsOn:
        - database
      environment:
        DB_HOST: database
        DB_NAME: apidb
        DB_USER: apiuser
        DB_PASSWORD: SecretPassword123!
      srcCodePath: /backend
      command: >-
        ["/wait-for-it.sh", "database:5432", "--", "rails", "server", "-b",
        "0.0.0.0", "-p", "80"]
      withTraefik: true
      dockerComposeServiceName: backend
